Merge-insertion sort performs the following steps, on an input 𝑋 of 𝑛 elements:Group the elements of 𝑋 into ⌊𝑛/2⌋ pairs of elements, arbitrarily, leaving one element unpaired if there is an odd number of elements.Perform ⌊𝑛/2⌋ comparisons, one per pair, to determine the larger of the two elements in each pair.Recursively sort the ⌊𝑛/2⌋ larger elements from each pair, creating a sorted sequence 𝑆 of ⌊𝑛/2⌋ of the input elements, in ascending order.Insert at the start of 𝑆 the element that was paired with the first and smallest element of 𝑆.Insert the remaining ⌈𝑛/2⌉−1 elements of 𝑋∖𝑆 into 𝑆, one at a time, with a specially chosen insertion ordering described below. Use binary search in subsequences of 𝑆 (as described below) to determine the position at which each element should be inserted.The algorithm is designed to take advantage of the fact that the binary searches used to insert elements into 𝑆 are most efficient (from the point of view of worst case analysis) when the length of the subsequence that is searched is one less than a power of two. This is because, for those lengths, all outcomes of the search use the same number of comparisons as each other. To choose an insertion ordering that produces these lengths, consider the sorted sequence 𝑆 after step 4 of the outline above (before inserting the remaining elements), and let 𝑥𝑖 denote the 𝑖th element of this sorted sequence. Thus,𝑆=(𝑥1,𝑥2,𝑥3,…),where each element 𝑥𝑖 with 𝑖≥3 is paired with an element 𝑦𝑖<𝑥𝑖 that has not yet been inserted. (There are no elements 𝑦1 or 𝑦2 because 𝑥1 and 𝑥2 were paired with each other.) If 𝑛 is odd, the remaining unpaired element should also be numbered as 𝑦𝑖 with 𝑖 larger than the indexes of the paired elements. Then, the final step of the outline above can be expanded into the following steps:Partition the uninserted elements 𝑦𝑖 into groups with contiguous indexes. There are two elements 𝑦3 and 𝑦4 in the first group, and the sums of sizes of every two adjacent groups form a sequence of powers of two. Thus, the sizes of groups are: 2, 2, 6, 10, 22, 42, ...Order the uninserted elements by their groups (smaller indexes to larger indexes), but within each group order them from larger indexes to smaller indexes. Thus, the ordering becomes𝑦4,𝑦3,𝑦6,𝑦5,𝑦12,𝑦11,𝑦10,𝑦9,𝑦8,𝑦7,𝑦22,𝑦21…Use this ordering to insert the elements 𝑦𝑖 into 𝑆. For each element 𝑦𝑖, use a binary search from the start of 𝑆 up to but not including 𝑥𝑖 to determine where to insert 𝑦𝑖.
